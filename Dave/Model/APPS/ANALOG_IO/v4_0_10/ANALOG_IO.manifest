package Model.APPS.ANALOG_IO.v4_0_10;

/*
 Copyright (c) 2015, Infineon Technologies AG
 All rights reserved.
											
 Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 following conditions are met:
																			 
 Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 disclaimer.
  
 Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 disclaimer in the documentation and/or other materials provided with the distribution.
  
 Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 products derived from this software without specific prior written permission.
																			 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
																			 
 To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes with
 Infineon Technologies AG: dave@infineon.com. */

/*************** Revision History **********************************************
Version        Date          Description 

  4.0.0       16-Feb-2015    Initial version.<br>
  4.0.1       20-Feb-2015    APP help documentation improved.<br>
  4.0.2       07-May-2015    APP sharable property enabled to allows multiple APPs to require the same instance.<br>
  4.0.4       20-Jun-2015    1). _Add pin removed.<br>
                             2). Version check added for XMCLib dependency.<br> 
  4.0.6       31-Jul-2015    1) Added support for XMC1400 devices.<br> 
                             2) Added support for XMC4700/XMC4800 devices.<br> 
  4.0.8       10-Dec-2015    1) Added Digital input support for analog port pin.<br>
                             2) Added Hardware pull control support for analog port pin.<br>
                             3) Added ANALOG_IO_Init API.<br>
                             4) Added ANALOG_IO_GetInput API.<br>
                             5) Added support for XMC4300 devices.<br>
  4.0.10       08-Jul-2016   Fixed incorrect case for an included header. <BR>
*******************************************************************************/

// Import statements
import ifx.davex.app.manifest.*

class  ANALOG_IO extends ANALOG_IO_GUI {
/* -------------------------------------------------Begin : APP Properties------------------------------------------------------------------- */
		
	/**
	 * App version
	 * Format: a string with three digit separated by a dot.
	 */
	def version            = '4.0.10'
	
	/**
	 * App categories declaration. 
	 * It is list of strings. Subcategories are separated by slash.
	 * No limits on number of categories and subcategories depth.
	 */
	def categoriesDescription = ['System'] 

	/** 
	 * Minimum DAVE version required for this app.
	 * 
	 * It is string with three digit separated by a dot.
	 */
	def minDaveVersion           = '4.0.0'
	
	/** 
	 * Keywords used by search feature in Apps selection view
	 * 
	 * It is a list of string.
	 */
	def keywords      = [
		'PORT',
		'Pad',
		'Analog',
		'ALL'
		]
	
	/** 
	 * softwareIDs is used to declare which devices are compatible with this app.
	 * It is a map with key a string containing a pattern that shall match the SW id of
	 * the device and as value the minimal version of the app.
	 * 
	 * 
	 */
	
	/** 
	 * softwareIDs is used to declare which devices are compatible with this APP.
	 * It is a map with key a string containing a pattern that shall match the SW id of
	 * the device and as value the minimal version of the APP.
	 * 
	 * 
	 */
	
	def softwareIDs       = [
		"XMC4.5.*.*.*":"1.0.0",
		"XMC4.4.*.*.*":"1.0.0",
		"XMC4.2.*.*.*":"1.0.0",
		"XMC4.1.*.*.*":"1.0.0",
		"XMC4.7.*.*.*":"1.0.0",
		"XMC4.8.*.*.*":"1.0.0",
		"XMC4.3.*.*.*":"1.0.0",
		"XMC1.1.*.*.*":"1.0.0",
		"XMC1.2.*.*.*":"1.0.0",
		"XMC1.3.*.*.*":"1.0.0",
		"XMC1.4.*.*.*":"1.0.0"
		]


	/**
	 * Singleton property:
	 * When it is true the app can be instantiated only once.
	 */
	def singleton     = false
	
	/**
	 * initProvider property
	 * It shall be true to add a call to <AppName>_Init()
	 */
	def initProvider  = true
	
	/**
	 * Deprecated app
	 * Set it to true to indicate that the app shall be not used for new projects.
	 */
	def deprecated    = false
	
	/**
	 * Sharable property.
	 * It shall be true to allows multiple apps to require the same instance of this app.
	 */
	def sharable      = true

	/**
	 *  App function description.
	 */
	def description = "Configures a port pin to use as analog input/output and digital input."
	
/* -----------------------------------------------------------------End: App Properties------------------------------------------------------ */
	
	
/*------------------------------------------------------------Begin : User Variables for hardware resources and virtual signals--------------- */
	SolverVariable port_no = SolverVariable()
	MVirtualResourceGroup hwres_port_pin
	MVirtualSignal vs_analog_io_pad_pin
	MVirtualSignal vs_analog_io_hwp
/*-----------------------------------------------------------End : User Variables for hardware resources and virtual signals--------------------*/

	
/*----------------------------------------------------------Begin : App Constructor and Logic --------------------------------------------------*/
	public ANALOG_IO(DaveEnv daveEnv) {

		MF digital_input
		MF speed_class
		List port_constraint;
		int hysteresis;
/*-------------------------------------------------------------------------------------------------------------------------------------------*/
/*                          				Target Specific User Variable initialization                                                     */
/*-------------------------------------------------------------------------------------------------------------------------------------------*/
		
		/* device based port range constraint */
		if (daveEnv.project.selectedDevice.deviceId.family == "XMC4")
		{
		  port_constraint = [14,15]
		  hysteresis = 0
		  gcombo_pull_device.options = ["None","Pull Up", "Pull Down"]
		}
		else
		{
		  port_constraint = [2]
		  hysteresis = 1
		  gcombo_hysteresis.options = ["Standard","Large"]
		  
		  if((daveEnv.project.selectedDevice.deviceId.family + daveEnv.project.selectedDevice.deviceId.series) != "XMC11")
		  {
		    gcombo_pull_device.options = ["None","Pull Up", "Pull Down","Hardware Controlled"]
		  }
		  else
		  {
			gcombo_pull_device.options = ["None","Pull Up", "Pull Down"]
		  }	
		}
		
		/* checking mode selection to update enable property of input widgets */
		digital_input = MF({ if(gcheck_enable_digital_input.value == true){true} else{false} }, Boolean)
		
		gcheck_enable_digital_input_inversion.enabled = digital_input
		
		if(hysteresis == 1)
		{
		  glabel_hysteresis.enabled = digital_input
		  gcombo_hysteresis.enabled = digital_input
		}
		else
		{
		  glabel_hysteresis.visible = false
		  gcombo_hysteresis.visible = false
		  glabel_hysteresis.enabled = false
		  gcombo_hysteresis.enabled = false
		}
		/* Solver constraint for port */
		addUriElementRangeConstraint(port_no, port_constraint)

/*-------------------------------------------------------------------------------------------------------------------------------------------*/
/*------------------------------------------------Hardware resource consumption block ------------------------------------------------------ */
/*-------------------------------------------------------------------------------------------------------------------------------------------*/

		hwres_port_pin = MVirtualResourceGroup("pin", ["port", "p", port_no, "pad", "*"])

/*-------------------------------------------------------------------------------------------------------------------------------------------*/
/*                                				 Virtual Signals Definitions                                                                */
/*-------------------------------------------------------------------------------------------------------------------------------------------*/
		@AddPin(pinDisplayName ='pin')
		vs_analog_io_pad_pin = MVirtualSignal(hwres_port_pin, "pin", "pad", true, true)
	
	    vs_analog_io_hwp = MVirtualSignal(hwres_port_pin,
			                              "hw_pull_ctrl", 
										  "hw_p", 
			                              MF({if(gcombo_pull_device.value ==  "Hardware Controlled"){true}else{false}},Boolean), 
			                              MF({if(gcombo_pull_device.value ==  "Hardware Controlled"){true}else{false}},Boolean)
										  )

}	
/*-------------------------------------------------------------------------------------------------------------------------------------------*/
/*                                				 File Generation / Copy                                                                */
/*-------------------------------------------------------------------------------------------------------------------------------------------*/

	def generateFiles(){
			
		copy("analog_io.c", "analog_io.c")
		copy("analog_io.h", "analog_io.h")
		generate("analog_io_confc.tmpl", "analog_io_conf.c")
		generate("analog_io_confh.tmpl", "analog_io_conf.h")
		generate("analog_io_externh.tmpl", "analog_io_extern.h")
	}
	
/*-----------------------------------------------------End : App Constructor and Logic --------------------------------------------------*/

}
