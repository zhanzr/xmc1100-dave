package Model.APPS.ANALOG_IO.v4_0_10.Templates;

import Model.APPS.ANALOG_IO.v4_0_10.ANALOG_IO

out.print("""
/**
 * @cond
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015-2016, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2015-02-16:
 *     - Initial version<br>
 *
 * 2015-12-10:
 *     - Added Digital input support for analog port pin<br>
 *     - Added Hardware pull control support for analog port pin<br>
 *
 * 2016-07-08:
 *     - Fixed incorrect case for an included header.<br>
 *
 * @endcond
 *
 */
/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/
#include "analog_io.h"
""");


int xmc_family4x

Map gpio_hw_control =[
0 : 'XMC_GPIO_HWCTRL_DISABLED',
1 : 'XMC_GPIO_HWCTRL_PERIPHERAL1',
2 : 'XMC_GPIO_HWCTRL_PERIPHERAL2'
]

Map pull_device_direct =[
0 : 'XMC_GPIO_MODE_INPUT_TRISTATE' ,
1 : 'XMC_GPIO_MODE_INPUT_PULL_UP',
2 : 'XMC_GPIO_MODE_INPUT_PULL_DOWN'
]

Map pull_device_invert =[
0 : 'XMC_GPIO_MODE_INPUT_TRISTATE',
1 : 'XMC_GPIO_MODE_INPUT_INVERTED_PULL_UP',
2 : 'XMC_GPIO_MODE_INPUT_INVERTED_PULL_DOWN'
]  

/* Checking device selection to update APP handler parameters */
if( daveEnv.project.selectedDevice.deviceId.family == "XMC4" ){
 xmc_family4x = 1;  /** family 4 **/
}else{
  xmc_family4x = 0;
}

for (ANALOG_IO obj : appInstancesList )
{
 String objLabel = obj.getInstanceLabel()
	
 List mappedUri = obj.hwres_port_pin.getSolverUri()
 String mode;
 String config;
 String port = mappedUri[-3]
 String pin = mappedUri[-1]
 
 if (mappedUri)
 {
  switch(obj.gcombo_pull_device.value)
  {
	case "None":
	if(obj.gcheck_enable_digital_input_inversion.value == false)
	{
	  mode = "XMC_GPIO_MODE_INPUT_TRISTATE"
	}
	else
	{
	  mode = "XMC_GPIO_MODE_INPUT_INVERTED_TRISTATE"
	}
	break
				
	case "Pull Up":
	if(obj.gcheck_enable_digital_input_inversion.value == false)
	{
	  mode = "XMC_GPIO_MODE_INPUT_PULL_UP"
	}
	else  
	{
	  mode = "XMC_GPIO_MODE_INPUT_INVERTED_PULL_UP"
	}  
	break
				
	case "Pull Down":
	if(obj.gcheck_enable_digital_input_inversion.value == false)
	{
	  mode = "XMC_GPIO_MODE_INPUT_PULL_DOWN"
	}
	else  
	{
	  mode = "XMC_GPIO_MODE_INPUT_INVERTED_PULL_DOWN"
	}  
	break
	
	case "Hardware Controlled":
	mode = "XMC_GPIO_MODE_INPUT_TRISTATE"
	break
  }
 }

String hysteresis
String hardware_pull_ctrl

/* Updating input hysteresis enum */
if(obj.gcombo_hysteresis.value == "Standard")
{
  hysteresis = "XMC_GPIO_INPUT_HYSTERESIS_STANDARD"
}
else
{
  hysteresis = "XMC_GPIO_INPUT_HYSTERESIS_LARGE"
}

if(obj.gcombo_pull_device.value == "Hardware Controlled")
{
  if(obj.hwres_port_pin.getRegValue("", "hwsel_hw") != null)
  {
	hardware_pull_ctrl = gpio_hw_control[obj.hwres_port_pin.getRegValue("HWSEL","hwsel_hw").toInteger()]
      
  }
  else
  {
	hardware_pull_ctrl =  gpio_hw_control[0]
  }
}
else
{
  hardware_pull_ctrl = gpio_hw_control[0]
  
  /* Safely handling hw_sel */
  if(obj.hwres_port_pin.getRegValue("", "hwsel_hw") != null)
  {
    obj.hwres_port_pin.getRegValue("", "hwsel_hw")
  }
}

/* Safely handling iocr_oe */
if(obj.hwres_port_pin.getRegValue("", "iocr_oe") != null)
{
  obj.hwres_port_pin.getRegValue("", "iocr_oe")
}

/* Safely handling iocr_pcr */
if(obj.hwres_port_pin.getRegValue("", "iocr_pcr") != null)
{
  obj.hwres_port_pin.getRegValue("", "iocr_pcr")
}

/* Safely handling pdisc_pdis */
if(obj.hwres_port_pin.getRegValue("", "pdisc_pdis") != null)
{
  obj.hwres_port_pin.getRegValue("", "pdisc_pdis")
}
if ( (obj.gcombo_pull_device.value != "None") || (obj.gcheck_enable_digital_input.value == true ))
{

out.print("""
/**********************************************************************************************************************
 * FUNCTION PROTOTYPE
 **********************************************************************************************************************/

void ${objLabel}_config(void);
""");
}
out.print("""
/**********************************************************************************************************************
 * DATA STRUCTURES
 **********************************************************************************************************************/
/**
 * Instance specific initialization state variable.
 */
static ANALOG_IO_STATE_t ${objLabel}_state = ANALOG_IO_STATE_NOT_INITIALIZED;

/**
 * Instance specific data structure of ANALOG_IO APP.
 */
const ANALOG_IO_t ${objLabel} =
{""");
if ( (obj.gcombo_pull_device.value != "None") || (obj.gcheck_enable_digital_input.value == true )) 
{
out.print("""
  .config_ptr = &${objLabel}_config,""");
}
else
{
	out.print("""
  .config_ptr = NULL,""");
}
out.print("""
  .state  = &${objLabel}_state,
  .port = XMC_GPIO_PORT${port},
  .pin = ${pin}U  
};
""");

if ( (obj.gcombo_pull_device.value != "None") || (obj.gcheck_enable_digital_input.value == true )) 
{

out.print("""
/**********************************************************************************************************************
 * FUNCTION DEFINITION
 **********************************************************************************************************************/
/**
 * Instance specific initialization function to initialize the port pin as per UI settings.
 */
void ${objLabel}_config()
{
  /* Configure the weak pull up /down settings into IOCR register */
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)XMC_GPIO_PORT${port},  ${pin}U,  (XMC_GPIO_MODE_t)${mode});
""");
	if(xmc_family4x == 0)
	{
	  if(obj.gcombo_pull_device.value == "Hardware Controlled")
	  {
		out.print("""
  /* Set the hardware pull control option into HSEL register */
  XMC_GPIO_SetHardwareControl((XMC_GPIO_PORT_t *)XMC_GPIO_PORT${port}, ${pin}U, ${hardware_pull_ctrl});  
""");
	  }
	}
	
	if (obj.gcheck_enable_digital_input.value == true )
    {
		out.print("""
  /* Configure the PDISC register for digital input support */
  XMC_GPIO_EnableDigitalInput((XMC_GPIO_PORT_t *)XMC_GPIO_PORT${port}, ${pin}U);  
""");
	}
	if(xmc_family4x == 0)
	{
		if (obj.gcheck_enable_digital_input.value == true )
		{
		  out.print("""
 /* Configure the hysteresis options for selected port pin. Applicable only for XMC1x devices */
  XMC_GPIO_SetInputHysteresis((XMC_GPIO_PORT_t *)XMC_GPIO_PORT${port}, ${pin}U ,(XMC_GPIO_INPUT_HYSTERESIS_t)${hysteresis});""");
		}
	}	  
out.print("""
}
""");

}
}
